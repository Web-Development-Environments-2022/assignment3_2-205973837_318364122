openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/visited:
    get:
      tags:
      - Users
      summary: Return the last 3 watched recipes that were visited user
      description: Get an array the last 3 watched recipes that were visited by a specific user
      responses:
        "200":
          description: data about the user's 3 recently watched recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the watched recipes list of a user
      description: save recipe in the watched recipes list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user watched
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved in watched list
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /recipes/recipeId:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: query
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
  /recipes/fullDetailes:
  get:
    tags:
    - Recipes
    summary: Return full details on recipe by his ID
    description: Return full details on recipe by his ID
    parameters:
    - name: recipeId
      in: query
      description: recipe's id
      required: true
      style: simple
      explode: false
      schema:
        type: integer
    responses:
      "200":
        description: data about the recipe
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeFullDetailes'
      "404":
        description: recipeId is not exists
  /recipes/random:
    get:
      tags:
      - Recipes
      summary: Return 3 random recipes preview details
      description: Return 3 random recipes preview details
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
  /recipes/search/query/:searchQuery/number/:num:
    get:
      tags:
      - Recipes
      summary: Retrive recipes by key words
      description: Retrive recipes by key words
      parameters:
      - name: searchQuery
        in: path
        description: search query
        required: true
        schema:
          type: string
      - name: num
        in: path
        description: the number of recipes to retrive
        required: true
        schema:
          type: int
      - name: cuisine
        in: query
        description: The cuisine(s) of the recipes. One or more, comma separated
        required: false
        schema:
          type: string
      - name: diet
        in: query
        description: The diet for which the recipes must be suitable.
        explode: false
        schema:
          type: string
      - name: intolerances
        in: query
        description: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered.
        explode: false
        schema:
          type: string
      - name: sort
        in: query
        description: The strategy to sort recipes by
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeFullDetailes'
        "204":
          description: no recipes were found for this query
  /users/createrecipe:
    post:
      tags:
      - Users
      summary: user create a recipe
      description: A JSON object contains all the details about the new recipe.
      requestBody:
        description: recipe item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeFullDetailes'
        required: true
      responses:
        "201":
          description: A new recipe has been created
        "400":
          description: wrong input parameters
      security:
      - cookieAuth: []
  /users/myrecipes:
    get:
      tags:
      - Users
      summary: Return the recipes that created by the user.
      description: Get an array of recipes that were created by a specific user
      responses:
        "200":
          description: data about the user's recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/myrecipes/fulldetailes:
    get:
      tags:
      - Users
      summary: Return the full detailes of therecipe that created by the user with the specific recipeID.
      description: Get full detailes of the recipe that were created by a specific user with specific recipeID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MYRecipeFullDetailes'
        "204":
          description: invalid recipeID
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/familyrecipes:
    get:
      tags:
      - Users
      summary: Return the family recipes previews of the user.
      description: Get an array of family recipes previews of the user
      responses:
        "200":
          description: data about the user's family recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/familyrecipes/fulldetailes:
    get:
      tags:
      - Users
      summary: Return the full detailes of the user's family recipe with the specific recipeID.
      description: Get full detailes of the user's family recipe with the specific recipeID.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyRecipeFullDetailes'
        "204":
          description: invalid recipeID
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    RecipeFullDetailes:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        extendedIngredients:
          type: object
          description: list of dicts of ingredients and their name, amount and unit
          example: [{
            "name": "bread",
            "amount": 1,
            "unit": "serving"}]
        servings:
          type: integer
          description: how many servings in the recipe
          example: 4
        analyzedInstructions:
          type: object
          description: instructions of the recipe by steps
          example: [{"name": "","steps": [{"number": 1,"step": "Preheat the oven to 200 degrees F."}]}]
    FamilyRecipeFullDetailes:
      type: object
      properties:
        recipe_id:
          type: integer
          description: recipe identifier
          example: 102
        user_id:
          type: integer
          description: user identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        summary:
          type: string
          description: recipe creator and traditionals
          example: Grandma's recipe that we make in passover
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        extendedIngredients:
          type: object
          description: list of dicts of ingredients and their name, amount and unit
          example: [{
            "name": "bread",
            "amount": 1,
            "unit": "serving"}]
        servings:
          type: integer
          description: how many servings in the recipe
          example: 4
        analyzedInstructions:
          type: object
          description: instructions of the recipe by steps
          example: [{"name": "","steps": [{"number": 1,"step": "Preheat the oven to 200 degrees F."}]}]
    MYRecipeFullDetailes:
      type: object
      properties:
        recipe_id:
          type: integer
          description: recipe identifier
          example: 102
        user_id:
          type: integer
          description: user identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        extendedIngredients:
          type: object
          description: list of dicts of ingredients and their name, amount and unit
          example: [{
            "name": "bread",
            "amount": 1,
            "unit": "serving"}]
        servings:
          type: integer
          description: how many servings in the recipe
          example: 4
        analyzedInstructions:
          type: object
          description: instructions of the recipe by steps
          example: [{"name": "","steps": [{"number": 1,"step": "Preheat the oven to 200 degrees F."}]}]


  
